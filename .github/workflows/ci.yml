name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build-and-smoke-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t scarf-postgres-exporter:ci .

      - name: Smoke test with overridden workdir (simulates Actions)
        shell: bash
        run: |
          set +e
          # Run without required env so app exits early; we only assert error origin.
          OUTPUT=$(docker run --rm -w /github/workspace scarf-postgres-exporter:ci 2>&1)
          STATUS=$?
          echo "Container exit code: ${STATUS}"
          if [ "$STATUS" -eq 0 ]; then
            echo "ERROR: Container exited with code 0, but expected non-zero due to missing env var."
            exit 1
          fi
          echo "--- Begin Container Output ---"
          echo "$OUTPUT"
          echo "--- End Container Output ---"

          # Must NOT be an npm/package.json ENOENT error.
          if echo "$OUTPUT" | grep -Eqi "npm error|Could not read package.json|enoent.*package.json"; then
            echo "Unexpected npm/package.json error detected. Entry point fix failed."
            exit 1
          fi

          # Should fail fast due to missing env var from our app (expected in smoke test).
          if echo "$OUTPUT" | grep -q "missing env variable: SCARF_API_TOKEN"; then
            echo "Smoke test passed: entrypoint runs from /app and app executed."
            exit 0
          else
            echo "Did not observe expected app error. Output above for debugging."
            exit 1
          fi

      - name: Security regression check (no bash -c spawn)
        shell: bash
        run: |
          # Ensure we are not spawning a shell to run psql commands
          # Limit search to source files to avoid matching this workflow text
          if grep -R --include='*.ts' --include='*.js' -n -E "spawn\(['\"]bash['\"]" .; then
            echo "Found shell-based spawn usage. This is unsafe for connection strings with special characters."
            exit 1
          fi
          echo "No bash-based spawn usage detected."

      - name: Injection-safe psql invocation with special chars
        shell: bash
        run: |
          set +e
          # Use a connection string with a semicolon to simulate special characters in passwords
          OUTPUT=$(docker run --rm \
            -e SCARF_API_TOKEN=dummy \
            -e SCARF_ENTITY_NAME=dummy \
            -e PSQL_CONN_STRING='postgres://user:p%40ss;word@localhost:5432/dbname' \
            scarf-postgres-exporter:ci 2>&1)
          STATUS=$?
          echo "Container exit code: ${STATUS}"
          echo "--- Begin Output ---"
          echo "$OUTPUT"
          echo "--- End Output ---"

          # Must not show shell trying to execute -qtAX due to broken quoting
          if echo "$OUTPUT" | grep -q "-qtAX: command not found"; then
            echo "Detected unsafe shell splitting in psql invocation."
            exit 1
          fi
          echo "Psql invocation appears shell-safe."

  export-scarf-data:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: scarf
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: docker://scarf.docker.scarf.sh/scarf-sh/scarf-postgres-exporter:latest
        env:
          # Real E2E using Scarf API (token in repo/org secrets)
          SCARF_API_TOKEN: ${{ secrets.SCARF_API_TOKEN }}
          SCARF_ENTITY_NAME: ${{ secrets.SCARF_ENTITY_NAME }}
          BACKFILL_DAYS: "2"
          # Connect to the GitHub Actions Postgres service by its service name
          PSQL_CONN_STRING: 'postgres://postgres:pass@postgres:5432/scarf'

      - name: Verify row imported
        run: |
          docker run --rm --network host postgres:15-alpine \
            psql "postgres://postgres:pass@localhost:5432/scarf" -qtAX -c "select to_regclass('public.scarf_events_raw') is not null" | tee exists.txt
          OK=$(cat exists.txt | tr -d '[:space:]')
          echo "Table exists: $OK"
          if [ "$OK" != "t" ]; then
            echo "Table scarf_events_raw not found â€” import likely failed."
            exit 1
          fi
