name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
      sha: ${{ steps.meta.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Derive image ref
        id: meta
        run: |
          echo "image=${{ env.REGISTRY }}/${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push (SHA tag)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
          tags: ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.sha }}
      - name: Tag and push latest on main
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.image }}:latest

  

  export-scarf-data:
    needs: [build-and-push-image]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: scarf
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    env:
      SCARF_API_TOKEN: ${{ secrets.SCARF_API_TOKEN }}
      SCARF_ENTITY_NAME: ${{ secrets.SCARF_ENTITY_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run exporter against Postgres with real API
        if: ${{ env.SCARF_API_TOKEN != '' && env.SCARF_ENTITY_NAME != '' }}
        env:
          BACKFILL_DAYS: "2"
          # Connect via host network to the service-mapped localhost
          PSQL_CONN_STRING: 'postgres://postgres:pass@localhost:5432/scarf'
          IMAGE: ${{ needs.build-and-push-image.outputs.image }}
          SHA: ${{ needs.build-and-push-image.outputs.sha }}
        run: |
          docker run --rm --network host \
            -e SCARF_API_TOKEN="${SCARF_API_TOKEN}" \
            -e SCARF_ENTITY_NAME="${SCARF_ENTITY_NAME}" \
            -e BACKFILL_DAYS \
            -e PSQL_CONN_STRING \
            "$IMAGE:$SHA"
      - name: Verify row imported
        if: ${{ env.SCARF_API_TOKEN != '' && env.SCARF_ENTITY_NAME != '' }}
        run: bash scripts/verify_import_count.sh "postgres://postgres:pass@localhost:5432/scarf"

  tests:
    needs: [build-and-push-image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Run all tests
        env:
          GHCR_USERNAME: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          bash scripts/run_all_tests.sh "${{ needs.build-and-push-image.outputs.image }}:${{ needs.build-and-push-image.outputs.sha }}"
